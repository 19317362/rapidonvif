// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onvifcli.proto

#ifndef PROTOBUF_onvifcli_2eproto__INCLUDED
#define PROTOBUF_onvifcli_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "onvifclidevice.pb.h"
// @@protoc_insertion_point(includes)
class OnvifCliDeviceLoginReq;
class OnvifCliDeviceLoginReqDefaultTypeInternal;
extern OnvifCliDeviceLoginReqDefaultTypeInternal _OnvifCliDeviceLoginReq_default_instance_;
class OnvifCliDeviceLoginResp;
class OnvifCliDeviceLoginRespDefaultTypeInternal;
extern OnvifCliDeviceLoginRespDefaultTypeInternal _OnvifCliDeviceLoginResp_default_instance_;
class OnvifCliDeviceParam;
class OnvifCliDeviceParamDefaultTypeInternal;
extern OnvifCliDeviceParamDefaultTypeInternal _OnvifCliDeviceParam_default_instance_;
namespace OnvifCli {
class OnvifCliCmd;
class OnvifCliCmdDefaultTypeInternal;
extern OnvifCliCmdDefaultTypeInternal _OnvifCliCmd_default_instance_;
}  // namespace OnvifCli

namespace OnvifCli {

namespace protobuf_onvifcli_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_onvifcli_2eproto

enum OnvifCliCmdType {
  CLI_CMD_DEV_ZERO = 0,
  CLI_CMD_DEV_LOGIN_REQ = 1,
  CLI_CMD_DEV_LOGIN_RESP = 2,
  OnvifCliCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OnvifCliCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OnvifCliCmdType_IsValid(int value);
const OnvifCliCmdType OnvifCliCmdType_MIN = CLI_CMD_DEV_ZERO;
const OnvifCliCmdType OnvifCliCmdType_MAX = CLI_CMD_DEV_LOGIN_RESP;
const int OnvifCliCmdType_ARRAYSIZE = OnvifCliCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OnvifCliCmdType_descriptor();
inline const ::std::string& OnvifCliCmdType_Name(OnvifCliCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OnvifCliCmdType_descriptor(), value);
}
inline bool OnvifCliCmdType_Parse(
    const ::std::string& name, OnvifCliCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OnvifCliCmdType>(
    OnvifCliCmdType_descriptor(), name, value);
}
// ===================================================================

class OnvifCliCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OnvifCli.OnvifCliCmd) */ {
 public:
  OnvifCliCmd();
  virtual ~OnvifCliCmd();

  OnvifCliCmd(const OnvifCliCmd& from);

  inline OnvifCliCmd& operator=(const OnvifCliCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnvifCliCmd& default_instance();

  enum CmdCase {
    kLoginReq = 2,
    kLoginResp = 3,
    CMD_NOT_SET = 0,
  };

  static inline const OnvifCliCmd* internal_default_instance() {
    return reinterpret_cast<const OnvifCliCmd*>(
               &_OnvifCliCmd_default_instance_);
  }

  void Swap(OnvifCliCmd* other);

  // implements Message ----------------------------------------------

  inline OnvifCliCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  OnvifCliCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OnvifCliCmd& from);
  void MergeFrom(const OnvifCliCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnvifCliCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .OnvifCli.OnvifCliCmdType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::OnvifCli::OnvifCliCmdType type() const;
  void set_type(::OnvifCli::OnvifCliCmdType value);

  // .OnvifCliDeviceLoginReq loginReq = 2;
  bool has_loginreq() const;
  void clear_loginreq();
  static const int kLoginReqFieldNumber = 2;
  const ::OnvifCliDeviceLoginReq& loginreq() const;
  ::OnvifCliDeviceLoginReq* mutable_loginreq();
  ::OnvifCliDeviceLoginReq* release_loginreq();
  void set_allocated_loginreq(::OnvifCliDeviceLoginReq* loginreq);

  // .OnvifCliDeviceLoginResp loginResp = 3;
  bool has_loginresp() const;
  void clear_loginresp();
  static const int kLoginRespFieldNumber = 3;
  const ::OnvifCliDeviceLoginResp& loginresp() const;
  ::OnvifCliDeviceLoginResp* mutable_loginresp();
  ::OnvifCliDeviceLoginResp* release_loginresp();
  void set_allocated_loginresp(::OnvifCliDeviceLoginResp* loginresp);

  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:OnvifCli.OnvifCliCmd)
 private:
  void set_has_loginreq();
  void set_has_loginresp();

  inline bool has_cmd() const;
  void clear_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union CmdUnion {
    CmdUnion() {}
    ::OnvifCliDeviceLoginReq* loginreq_;
    ::OnvifCliDeviceLoginResp* loginresp_;
  } cmd_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_onvifcli_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifCliCmd

// .OnvifCli.OnvifCliCmdType type = 1;
inline void OnvifCliCmd::clear_type() {
  type_ = 0;
}
inline ::OnvifCli::OnvifCliCmdType OnvifCliCmd::type() const {
  // @@protoc_insertion_point(field_get:OnvifCli.OnvifCliCmd.type)
  return static_cast< ::OnvifCli::OnvifCliCmdType >(type_);
}
inline void OnvifCliCmd::set_type(::OnvifCli::OnvifCliCmdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:OnvifCli.OnvifCliCmd.type)
}

// .OnvifCliDeviceLoginReq loginReq = 2;
inline bool OnvifCliCmd::has_loginreq() const {
  return cmd_case() == kLoginReq;
}
inline void OnvifCliCmd::set_has_loginreq() {
  _oneof_case_[0] = kLoginReq;
}
inline void OnvifCliCmd::clear_loginreq() {
  if (has_loginreq()) {
    delete cmd_.loginreq_;
    clear_has_cmd();
  }
}
inline  const ::OnvifCliDeviceLoginReq& OnvifCliCmd::loginreq() const {
  // @@protoc_insertion_point(field_get:OnvifCli.OnvifCliCmd.loginReq)
  return has_loginreq()
      ? *cmd_.loginreq_
      : ::OnvifCliDeviceLoginReq::default_instance();
}
inline ::OnvifCliDeviceLoginReq* OnvifCliCmd::mutable_loginreq() {
  if (!has_loginreq()) {
    clear_cmd();
    set_has_loginreq();
    cmd_.loginreq_ = new ::OnvifCliDeviceLoginReq;
  }
  // @@protoc_insertion_point(field_mutable:OnvifCli.OnvifCliCmd.loginReq)
  return cmd_.loginreq_;
}
inline ::OnvifCliDeviceLoginReq* OnvifCliCmd::release_loginreq() {
  // @@protoc_insertion_point(field_release:OnvifCli.OnvifCliCmd.loginReq)
  if (has_loginreq()) {
    clear_has_cmd();
    ::OnvifCliDeviceLoginReq* temp = cmd_.loginreq_;
    cmd_.loginreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OnvifCliCmd::set_allocated_loginreq(::OnvifCliDeviceLoginReq* loginreq) {
  clear_cmd();
  if (loginreq) {
    set_has_loginreq();
    cmd_.loginreq_ = loginreq;
  }
  // @@protoc_insertion_point(field_set_allocated:OnvifCli.OnvifCliCmd.loginReq)
}

// .OnvifCliDeviceLoginResp loginResp = 3;
inline bool OnvifCliCmd::has_loginresp() const {
  return cmd_case() == kLoginResp;
}
inline void OnvifCliCmd::set_has_loginresp() {
  _oneof_case_[0] = kLoginResp;
}
inline void OnvifCliCmd::clear_loginresp() {
  if (has_loginresp()) {
    delete cmd_.loginresp_;
    clear_has_cmd();
  }
}
inline  const ::OnvifCliDeviceLoginResp& OnvifCliCmd::loginresp() const {
  // @@protoc_insertion_point(field_get:OnvifCli.OnvifCliCmd.loginResp)
  return has_loginresp()
      ? *cmd_.loginresp_
      : ::OnvifCliDeviceLoginResp::default_instance();
}
inline ::OnvifCliDeviceLoginResp* OnvifCliCmd::mutable_loginresp() {
  if (!has_loginresp()) {
    clear_cmd();
    set_has_loginresp();
    cmd_.loginresp_ = new ::OnvifCliDeviceLoginResp;
  }
  // @@protoc_insertion_point(field_mutable:OnvifCli.OnvifCliCmd.loginResp)
  return cmd_.loginresp_;
}
inline ::OnvifCliDeviceLoginResp* OnvifCliCmd::release_loginresp() {
  // @@protoc_insertion_point(field_release:OnvifCli.OnvifCliCmd.loginResp)
  if (has_loginresp()) {
    clear_has_cmd();
    ::OnvifCliDeviceLoginResp* temp = cmd_.loginresp_;
    cmd_.loginresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void OnvifCliCmd::set_allocated_loginresp(::OnvifCliDeviceLoginResp* loginresp) {
  clear_cmd();
  if (loginresp) {
    set_has_loginresp();
    cmd_.loginresp_ = loginresp;
  }
  // @@protoc_insertion_point(field_set_allocated:OnvifCli.OnvifCliCmd.loginResp)
}

inline bool OnvifCliCmd::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void OnvifCliCmd::clear_has_cmd() {
  _oneof_case_[0] = CMD_NOT_SET;
}
inline OnvifCliCmd::CmdCase OnvifCliCmd::cmd_case() const {
  return OnvifCliCmd::CmdCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace OnvifCli

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::OnvifCli::OnvifCliCmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OnvifCli::OnvifCliCmdType>() {
  return ::OnvifCli::OnvifCliCmdType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_onvifcli_2eproto__INCLUDED
