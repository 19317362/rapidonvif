// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onvifdevicec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "onvifdevicec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OnvifDevice {
class OnvifDeviceParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifDeviceParam> {
} _OnvifDeviceParam_default_instance_;
class OnvifDeviceLoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifDeviceLoginReq> {
} _OnvifDeviceLoginReq_default_instance_;
class OnvifDeviceLoginRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifDeviceLoginResp> {
} _OnvifDeviceLoginResp_default_instance_;

namespace protobuf_onvifdevicec_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceParam, strname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceParam, strpasswd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceParam, strurl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceLoginReq, strname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceLoginReq, strpasswd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceLoginReq, strurl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifDeviceLoginResp, strhandle_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(OnvifDeviceParam)},
  { 7, -1, sizeof(OnvifDeviceLoginReq)},
  { 14, -1, sizeof(OnvifDeviceLoginResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifDeviceParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifDeviceLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifDeviceLoginResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "onvifdevicec.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _OnvifDeviceParam_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _OnvifDeviceLoginReq_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _OnvifDeviceLoginResp_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _OnvifDeviceParam_default_instance_.DefaultConstruct();
  _OnvifDeviceLoginReq_default_instance_.DefaultConstruct();
  _OnvifDeviceLoginResp_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022onvifdevicec.proto\022\013OnvifDevice\"F\n\020Onv"
      "ifDeviceParam\022\017\n\007strName\030\001 \001(\t\022\021\n\tstrPas"
      "swd\030\002 \001(\t\022\016\n\006strUrl\030\003 \001(\t\"I\n\023OnvifDevice"
      "LoginReq\022\017\n\007strName\030\001 \001(\t\022\021\n\tstrPasswd\030\002"
      " \001(\t\022\016\n\006strUrl\030\003 \001(\t\")\n\024OnvifDeviceLogin"
      "Resp\022\021\n\tstrHandle\030\001 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "onvifdevicec.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_onvifdevicec_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifDeviceParam::kStrNameFieldNumber;
const int OnvifDeviceParam::kStrPasswdFieldNumber;
const int OnvifDeviceParam::kStrUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifDeviceParam::OnvifDeviceParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifdevicec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifDevice.OnvifDeviceParam)
}
OnvifDeviceParam::OnvifDeviceParam(const OnvifDeviceParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strname().size() > 0) {
    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strpasswd().size() > 0) {
    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
  strurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strurl().size() > 0) {
    strurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strurl_);
  }
  // @@protoc_insertion_point(copy_constructor:OnvifDevice.OnvifDeviceParam)
}

void OnvifDeviceParam::SharedCtor() {
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OnvifDeviceParam::~OnvifDeviceParam() {
  // @@protoc_insertion_point(destructor:OnvifDevice.OnvifDeviceParam)
  SharedDtor();
}

void OnvifDeviceParam::SharedDtor() {
  strname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnvifDeviceParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifDeviceParam::descriptor() {
  protobuf_onvifdevicec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifdevicec_2eproto::file_level_metadata[0].descriptor;
}

const OnvifDeviceParam& OnvifDeviceParam::default_instance() {
  protobuf_onvifdevicec_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifDeviceParam* OnvifDeviceParam::New(::google::protobuf::Arena* arena) const {
  OnvifDeviceParam* n = new OnvifDeviceParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifDeviceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifDevice.OnvifDeviceParam)
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OnvifDeviceParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifDevice.OnvifDeviceParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifDevice.OnvifDeviceParam.strName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strPasswd = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strpasswd().data(), this->strpasswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifDevice.OnvifDeviceParam.strPasswd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strUrl = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strurl().data(), this->strurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifDevice.OnvifDeviceParam.strUrl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifDevice.OnvifDeviceParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifDevice.OnvifDeviceParam)
  return false;
#undef DO_
}

void OnvifDeviceParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifDevice.OnvifDeviceParam)
  // string strName = 1;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceParam.strName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strname(), output);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceParam.strPasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strpasswd(), output);
  }

  // string strUrl = 3;
  if (this->strurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceParam.strUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strurl(), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifDevice.OnvifDeviceParam)
}

::google::protobuf::uint8* OnvifDeviceParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifDevice.OnvifDeviceParam)
  // string strName = 1;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceParam.strName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceParam.strPasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpasswd(), target);
  }

  // string strUrl = 3;
  if (this->strurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceParam.strUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strurl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifDevice.OnvifDeviceParam)
  return target;
}

size_t OnvifDeviceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifDevice.OnvifDeviceParam)
  size_t total_size = 0;

  // string strName = 1;
  if (this->strname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strname());
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strpasswd());
  }

  // string strUrl = 3;
  if (this->strurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strurl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifDeviceParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifDevice.OnvifDeviceParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifDeviceParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifDeviceParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifDevice.OnvifDeviceParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifDevice.OnvifDeviceParam)
    MergeFrom(*source);
  }
}

void OnvifDeviceParam::MergeFrom(const OnvifDeviceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifDevice.OnvifDeviceParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strname().size() > 0) {

    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  if (from.strpasswd().size() > 0) {

    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
  if (from.strurl().size() > 0) {

    strurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strurl_);
  }
}

void OnvifDeviceParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifDevice.OnvifDeviceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifDeviceParam::CopyFrom(const OnvifDeviceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifDevice.OnvifDeviceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifDeviceParam::IsInitialized() const {
  return true;
}

void OnvifDeviceParam::Swap(OnvifDeviceParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifDeviceParam::InternalSwap(OnvifDeviceParam* other) {
  strname_.Swap(&other->strname_);
  strpasswd_.Swap(&other->strpasswd_);
  strurl_.Swap(&other->strurl_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifDeviceParam::GetMetadata() const {
  protobuf_onvifdevicec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifdevicec_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifDeviceParam

// string strName = 1;
void OnvifDeviceParam::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifDeviceParam::strname() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceParam.strName)
  return strname_.GetNoArena();
}
void OnvifDeviceParam::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceParam.strName)
}
#if LANG_CXX11
void OnvifDeviceParam::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceParam.strName)
}
#endif
void OnvifDeviceParam::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceParam.strName)
}
void OnvifDeviceParam::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceParam.strName)
}
::std::string* OnvifDeviceParam::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceParam.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifDeviceParam::release_strname() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceParam.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifDeviceParam::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceParam.strName)
}

// string strPasswd = 2;
void OnvifDeviceParam::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifDeviceParam::strpasswd() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceParam.strPasswd)
  return strpasswd_.GetNoArena();
}
void OnvifDeviceParam::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceParam.strPasswd)
}
#if LANG_CXX11
void OnvifDeviceParam::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceParam.strPasswd)
}
#endif
void OnvifDeviceParam::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceParam.strPasswd)
}
void OnvifDeviceParam::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceParam.strPasswd)
}
::std::string* OnvifDeviceParam::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceParam.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifDeviceParam::release_strpasswd() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceParam.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifDeviceParam::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceParam.strPasswd)
}

// string strUrl = 3;
void OnvifDeviceParam::clear_strurl() {
  strurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifDeviceParam::strurl() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceParam.strUrl)
  return strurl_.GetNoArena();
}
void OnvifDeviceParam::set_strurl(const ::std::string& value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceParam.strUrl)
}
#if LANG_CXX11
void OnvifDeviceParam::set_strurl(::std::string&& value) {
  
  strurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceParam.strUrl)
}
#endif
void OnvifDeviceParam::set_strurl(const char* value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceParam.strUrl)
}
void OnvifDeviceParam::set_strurl(const char* value, size_t size) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceParam.strUrl)
}
::std::string* OnvifDeviceParam::mutable_strurl() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceParam.strUrl)
  return strurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifDeviceParam::release_strurl() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceParam.strUrl)
  
  return strurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifDeviceParam::set_allocated_strurl(::std::string* strurl) {
  if (strurl != NULL) {
    
  } else {
    
  }
  strurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strurl);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceParam.strUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifDeviceLoginReq::kStrNameFieldNumber;
const int OnvifDeviceLoginReq::kStrPasswdFieldNumber;
const int OnvifDeviceLoginReq::kStrUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifDeviceLoginReq::OnvifDeviceLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifdevicec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifDevice.OnvifDeviceLoginReq)
}
OnvifDeviceLoginReq::OnvifDeviceLoginReq(const OnvifDeviceLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strname().size() > 0) {
    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strpasswd().size() > 0) {
    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
  strurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strurl().size() > 0) {
    strurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strurl_);
  }
  // @@protoc_insertion_point(copy_constructor:OnvifDevice.OnvifDeviceLoginReq)
}

void OnvifDeviceLoginReq::SharedCtor() {
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OnvifDeviceLoginReq::~OnvifDeviceLoginReq() {
  // @@protoc_insertion_point(destructor:OnvifDevice.OnvifDeviceLoginReq)
  SharedDtor();
}

void OnvifDeviceLoginReq::SharedDtor() {
  strname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnvifDeviceLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifDeviceLoginReq::descriptor() {
  protobuf_onvifdevicec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifdevicec_2eproto::file_level_metadata[1].descriptor;
}

const OnvifDeviceLoginReq& OnvifDeviceLoginReq::default_instance() {
  protobuf_onvifdevicec_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifDeviceLoginReq* OnvifDeviceLoginReq::New(::google::protobuf::Arena* arena) const {
  OnvifDeviceLoginReq* n = new OnvifDeviceLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifDeviceLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifDevice.OnvifDeviceLoginReq)
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OnvifDeviceLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifDevice.OnvifDeviceLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifDevice.OnvifDeviceLoginReq.strName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strPasswd = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strpasswd().data(), this->strpasswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifDevice.OnvifDeviceLoginReq.strPasswd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strUrl = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strurl().data(), this->strurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifDevice.OnvifDeviceLoginReq.strUrl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifDevice.OnvifDeviceLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifDevice.OnvifDeviceLoginReq)
  return false;
#undef DO_
}

void OnvifDeviceLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifDevice.OnvifDeviceLoginReq)
  // string strName = 1;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceLoginReq.strName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strname(), output);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceLoginReq.strPasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strpasswd(), output);
  }

  // string strUrl = 3;
  if (this->strurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceLoginReq.strUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strurl(), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifDevice.OnvifDeviceLoginReq)
}

::google::protobuf::uint8* OnvifDeviceLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifDevice.OnvifDeviceLoginReq)
  // string strName = 1;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceLoginReq.strName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceLoginReq.strPasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpasswd(), target);
  }

  // string strUrl = 3;
  if (this->strurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceLoginReq.strUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strurl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifDevice.OnvifDeviceLoginReq)
  return target;
}

size_t OnvifDeviceLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifDevice.OnvifDeviceLoginReq)
  size_t total_size = 0;

  // string strName = 1;
  if (this->strname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strname());
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strpasswd());
  }

  // string strUrl = 3;
  if (this->strurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strurl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifDeviceLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifDevice.OnvifDeviceLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifDeviceLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifDeviceLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifDevice.OnvifDeviceLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifDevice.OnvifDeviceLoginReq)
    MergeFrom(*source);
  }
}

void OnvifDeviceLoginReq::MergeFrom(const OnvifDeviceLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifDevice.OnvifDeviceLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strname().size() > 0) {

    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  if (from.strpasswd().size() > 0) {

    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
  if (from.strurl().size() > 0) {

    strurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strurl_);
  }
}

void OnvifDeviceLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifDevice.OnvifDeviceLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifDeviceLoginReq::CopyFrom(const OnvifDeviceLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifDevice.OnvifDeviceLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifDeviceLoginReq::IsInitialized() const {
  return true;
}

void OnvifDeviceLoginReq::Swap(OnvifDeviceLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifDeviceLoginReq::InternalSwap(OnvifDeviceLoginReq* other) {
  strname_.Swap(&other->strname_);
  strpasswd_.Swap(&other->strpasswd_);
  strurl_.Swap(&other->strurl_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifDeviceLoginReq::GetMetadata() const {
  protobuf_onvifdevicec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifdevicec_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifDeviceLoginReq

// string strName = 1;
void OnvifDeviceLoginReq::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifDeviceLoginReq::strname() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceLoginReq.strName)
  return strname_.GetNoArena();
}
void OnvifDeviceLoginReq::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceLoginReq.strName)
}
#if LANG_CXX11
void OnvifDeviceLoginReq::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceLoginReq.strName)
}
#endif
void OnvifDeviceLoginReq::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceLoginReq.strName)
}
void OnvifDeviceLoginReq::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceLoginReq.strName)
}
::std::string* OnvifDeviceLoginReq::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceLoginReq.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifDeviceLoginReq::release_strname() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceLoginReq.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifDeviceLoginReq::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceLoginReq.strName)
}

// string strPasswd = 2;
void OnvifDeviceLoginReq::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifDeviceLoginReq::strpasswd() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
  return strpasswd_.GetNoArena();
}
void OnvifDeviceLoginReq::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}
#if LANG_CXX11
void OnvifDeviceLoginReq::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}
#endif
void OnvifDeviceLoginReq::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}
void OnvifDeviceLoginReq::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}
::std::string* OnvifDeviceLoginReq::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifDeviceLoginReq::release_strpasswd() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifDeviceLoginReq::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}

// string strUrl = 3;
void OnvifDeviceLoginReq::clear_strurl() {
  strurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifDeviceLoginReq::strurl() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceLoginReq.strUrl)
  return strurl_.GetNoArena();
}
void OnvifDeviceLoginReq::set_strurl(const ::std::string& value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}
#if LANG_CXX11
void OnvifDeviceLoginReq::set_strurl(::std::string&& value) {
  
  strurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}
#endif
void OnvifDeviceLoginReq::set_strurl(const char* value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}
void OnvifDeviceLoginReq::set_strurl(const char* value, size_t size) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}
::std::string* OnvifDeviceLoginReq::mutable_strurl() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceLoginReq.strUrl)
  return strurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifDeviceLoginReq::release_strurl() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceLoginReq.strUrl)
  
  return strurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifDeviceLoginReq::set_allocated_strurl(::std::string* strurl) {
  if (strurl != NULL) {
    
  } else {
    
  }
  strurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strurl);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifDeviceLoginResp::kStrHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifDeviceLoginResp::OnvifDeviceLoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifdevicec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifDevice.OnvifDeviceLoginResp)
}
OnvifDeviceLoginResp::OnvifDeviceLoginResp(const OnvifDeviceLoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strhandle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strhandle().size() > 0) {
    strhandle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strhandle_);
  }
  // @@protoc_insertion_point(copy_constructor:OnvifDevice.OnvifDeviceLoginResp)
}

void OnvifDeviceLoginResp::SharedCtor() {
  strhandle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OnvifDeviceLoginResp::~OnvifDeviceLoginResp() {
  // @@protoc_insertion_point(destructor:OnvifDevice.OnvifDeviceLoginResp)
  SharedDtor();
}

void OnvifDeviceLoginResp::SharedDtor() {
  strhandle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnvifDeviceLoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifDeviceLoginResp::descriptor() {
  protobuf_onvifdevicec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifdevicec_2eproto::file_level_metadata[2].descriptor;
}

const OnvifDeviceLoginResp& OnvifDeviceLoginResp::default_instance() {
  protobuf_onvifdevicec_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifDeviceLoginResp* OnvifDeviceLoginResp::New(::google::protobuf::Arena* arena) const {
  OnvifDeviceLoginResp* n = new OnvifDeviceLoginResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifDeviceLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifDevice.OnvifDeviceLoginResp)
  strhandle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OnvifDeviceLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifDevice.OnvifDeviceLoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strHandle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strhandle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strhandle().data(), this->strhandle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifDevice.OnvifDeviceLoginResp.strHandle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifDevice.OnvifDeviceLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifDevice.OnvifDeviceLoginResp)
  return false;
#undef DO_
}

void OnvifDeviceLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifDevice.OnvifDeviceLoginResp)
  // string strHandle = 1;
  if (this->strhandle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strhandle().data(), this->strhandle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceLoginResp.strHandle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strhandle(), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifDevice.OnvifDeviceLoginResp)
}

::google::protobuf::uint8* OnvifDeviceLoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifDevice.OnvifDeviceLoginResp)
  // string strHandle = 1;
  if (this->strhandle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strhandle().data(), this->strhandle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifDevice.OnvifDeviceLoginResp.strHandle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strhandle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifDevice.OnvifDeviceLoginResp)
  return target;
}

size_t OnvifDeviceLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifDevice.OnvifDeviceLoginResp)
  size_t total_size = 0;

  // string strHandle = 1;
  if (this->strhandle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strhandle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifDeviceLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifDevice.OnvifDeviceLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifDeviceLoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifDeviceLoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifDevice.OnvifDeviceLoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifDevice.OnvifDeviceLoginResp)
    MergeFrom(*source);
  }
}

void OnvifDeviceLoginResp::MergeFrom(const OnvifDeviceLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifDevice.OnvifDeviceLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strhandle().size() > 0) {

    strhandle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strhandle_);
  }
}

void OnvifDeviceLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifDevice.OnvifDeviceLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifDeviceLoginResp::CopyFrom(const OnvifDeviceLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifDevice.OnvifDeviceLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifDeviceLoginResp::IsInitialized() const {
  return true;
}

void OnvifDeviceLoginResp::Swap(OnvifDeviceLoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifDeviceLoginResp::InternalSwap(OnvifDeviceLoginResp* other) {
  strhandle_.Swap(&other->strhandle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifDeviceLoginResp::GetMetadata() const {
  protobuf_onvifdevicec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifdevicec_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifDeviceLoginResp

// string strHandle = 1;
void OnvifDeviceLoginResp::clear_strhandle() {
  strhandle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifDeviceLoginResp::strhandle() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceLoginResp.strHandle)
  return strhandle_.GetNoArena();
}
void OnvifDeviceLoginResp::set_strhandle(const ::std::string& value) {
  
  strhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}
#if LANG_CXX11
void OnvifDeviceLoginResp::set_strhandle(::std::string&& value) {
  
  strhandle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}
#endif
void OnvifDeviceLoginResp::set_strhandle(const char* value) {
  
  strhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}
void OnvifDeviceLoginResp::set_strhandle(const char* value, size_t size) {
  
  strhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}
::std::string* OnvifDeviceLoginResp::mutable_strhandle() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceLoginResp.strHandle)
  return strhandle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifDeviceLoginResp::release_strhandle() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceLoginResp.strHandle)
  
  return strhandle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifDeviceLoginResp::set_allocated_strhandle(::std::string* strhandle) {
  if (strhandle != NULL) {
    
  } else {
    
  }
  strhandle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strhandle);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace OnvifDevice

// @@protoc_insertion_point(global_scope)
