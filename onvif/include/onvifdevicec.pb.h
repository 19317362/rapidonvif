// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onvifdevicec.proto

#ifndef PROTOBUF_onvifdevicec_2eproto__INCLUDED
#define PROTOBUF_onvifdevicec_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace OnvifDevice {
class OnvifDeviceLoginReq;
class OnvifDeviceLoginReqDefaultTypeInternal;
extern OnvifDeviceLoginReqDefaultTypeInternal _OnvifDeviceLoginReq_default_instance_;
class OnvifDeviceLoginResp;
class OnvifDeviceLoginRespDefaultTypeInternal;
extern OnvifDeviceLoginRespDefaultTypeInternal _OnvifDeviceLoginResp_default_instance_;
class OnvifDeviceParam;
class OnvifDeviceParamDefaultTypeInternal;
extern OnvifDeviceParamDefaultTypeInternal _OnvifDeviceParam_default_instance_;
}  // namespace OnvifDevice

namespace OnvifDevice {

namespace protobuf_onvifdevicec_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_onvifdevicec_2eproto

// ===================================================================

class OnvifDeviceParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OnvifDevice.OnvifDeviceParam) */ {
 public:
  OnvifDeviceParam();
  virtual ~OnvifDeviceParam();

  OnvifDeviceParam(const OnvifDeviceParam& from);

  inline OnvifDeviceParam& operator=(const OnvifDeviceParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnvifDeviceParam& default_instance();

  static inline const OnvifDeviceParam* internal_default_instance() {
    return reinterpret_cast<const OnvifDeviceParam*>(
               &_OnvifDeviceParam_default_instance_);
  }

  void Swap(OnvifDeviceParam* other);

  // implements Message ----------------------------------------------

  inline OnvifDeviceParam* New() const PROTOBUF_FINAL { return New(NULL); }

  OnvifDeviceParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OnvifDeviceParam& from);
  void MergeFrom(const OnvifDeviceParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnvifDeviceParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strName = 1;
  void clear_strname();
  static const int kStrNameFieldNumber = 1;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // string strPasswd = 2;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 2;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_strpasswd(::std::string&& value);
  #endif
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // string strUrl = 3;
  void clear_strurl();
  static const int kStrUrlFieldNumber = 3;
  const ::std::string& strurl() const;
  void set_strurl(const ::std::string& value);
  #if LANG_CXX11
  void set_strurl(::std::string&& value);
  #endif
  void set_strurl(const char* value);
  void set_strurl(const char* value, size_t size);
  ::std::string* mutable_strurl();
  ::std::string* release_strurl();
  void set_allocated_strurl(::std::string* strurl);

  // @@protoc_insertion_point(class_scope:OnvifDevice.OnvifDeviceParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  ::google::protobuf::internal::ArenaStringPtr strurl_;
  mutable int _cached_size_;
  friend struct  protobuf_onvifdevicec_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnvifDeviceLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OnvifDevice.OnvifDeviceLoginReq) */ {
 public:
  OnvifDeviceLoginReq();
  virtual ~OnvifDeviceLoginReq();

  OnvifDeviceLoginReq(const OnvifDeviceLoginReq& from);

  inline OnvifDeviceLoginReq& operator=(const OnvifDeviceLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnvifDeviceLoginReq& default_instance();

  static inline const OnvifDeviceLoginReq* internal_default_instance() {
    return reinterpret_cast<const OnvifDeviceLoginReq*>(
               &_OnvifDeviceLoginReq_default_instance_);
  }

  void Swap(OnvifDeviceLoginReq* other);

  // implements Message ----------------------------------------------

  inline OnvifDeviceLoginReq* New() const PROTOBUF_FINAL { return New(NULL); }

  OnvifDeviceLoginReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OnvifDeviceLoginReq& from);
  void MergeFrom(const OnvifDeviceLoginReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnvifDeviceLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strName = 1;
  void clear_strname();
  static const int kStrNameFieldNumber = 1;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // string strPasswd = 2;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 2;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_strpasswd(::std::string&& value);
  #endif
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // string strUrl = 3;
  void clear_strurl();
  static const int kStrUrlFieldNumber = 3;
  const ::std::string& strurl() const;
  void set_strurl(const ::std::string& value);
  #if LANG_CXX11
  void set_strurl(::std::string&& value);
  #endif
  void set_strurl(const char* value);
  void set_strurl(const char* value, size_t size);
  ::std::string* mutable_strurl();
  ::std::string* release_strurl();
  void set_allocated_strurl(::std::string* strurl);

  // @@protoc_insertion_point(class_scope:OnvifDevice.OnvifDeviceLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  ::google::protobuf::internal::ArenaStringPtr strurl_;
  mutable int _cached_size_;
  friend struct  protobuf_onvifdevicec_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnvifDeviceLoginResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OnvifDevice.OnvifDeviceLoginResp) */ {
 public:
  OnvifDeviceLoginResp();
  virtual ~OnvifDeviceLoginResp();

  OnvifDeviceLoginResp(const OnvifDeviceLoginResp& from);

  inline OnvifDeviceLoginResp& operator=(const OnvifDeviceLoginResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnvifDeviceLoginResp& default_instance();

  static inline const OnvifDeviceLoginResp* internal_default_instance() {
    return reinterpret_cast<const OnvifDeviceLoginResp*>(
               &_OnvifDeviceLoginResp_default_instance_);
  }

  void Swap(OnvifDeviceLoginResp* other);

  // implements Message ----------------------------------------------

  inline OnvifDeviceLoginResp* New() const PROTOBUF_FINAL { return New(NULL); }

  OnvifDeviceLoginResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OnvifDeviceLoginResp& from);
  void MergeFrom(const OnvifDeviceLoginResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnvifDeviceLoginResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strHandle = 1;
  void clear_strhandle();
  static const int kStrHandleFieldNumber = 1;
  const ::std::string& strhandle() const;
  void set_strhandle(const ::std::string& value);
  #if LANG_CXX11
  void set_strhandle(::std::string&& value);
  #endif
  void set_strhandle(const char* value);
  void set_strhandle(const char* value, size_t size);
  ::std::string* mutable_strhandle();
  ::std::string* release_strhandle();
  void set_allocated_strhandle(::std::string* strhandle);

  // @@protoc_insertion_point(class_scope:OnvifDevice.OnvifDeviceLoginResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strhandle_;
  mutable int _cached_size_;
  friend struct  protobuf_onvifdevicec_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifDeviceParam

// string strName = 1;
inline void OnvifDeviceParam::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnvifDeviceParam::strname() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceParam.strName)
  return strname_.GetNoArena();
}
inline void OnvifDeviceParam::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceParam.strName)
}
#if LANG_CXX11
inline void OnvifDeviceParam::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceParam.strName)
}
#endif
inline void OnvifDeviceParam::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceParam.strName)
}
inline void OnvifDeviceParam::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceParam.strName)
}
inline ::std::string* OnvifDeviceParam::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceParam.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnvifDeviceParam::release_strname() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceParam.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnvifDeviceParam::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceParam.strName)
}

// string strPasswd = 2;
inline void OnvifDeviceParam::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnvifDeviceParam::strpasswd() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceParam.strPasswd)
  return strpasswd_.GetNoArena();
}
inline void OnvifDeviceParam::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceParam.strPasswd)
}
#if LANG_CXX11
inline void OnvifDeviceParam::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceParam.strPasswd)
}
#endif
inline void OnvifDeviceParam::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceParam.strPasswd)
}
inline void OnvifDeviceParam::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceParam.strPasswd)
}
inline ::std::string* OnvifDeviceParam::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceParam.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnvifDeviceParam::release_strpasswd() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceParam.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnvifDeviceParam::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceParam.strPasswd)
}

// string strUrl = 3;
inline void OnvifDeviceParam::clear_strurl() {
  strurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnvifDeviceParam::strurl() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceParam.strUrl)
  return strurl_.GetNoArena();
}
inline void OnvifDeviceParam::set_strurl(const ::std::string& value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceParam.strUrl)
}
#if LANG_CXX11
inline void OnvifDeviceParam::set_strurl(::std::string&& value) {
  
  strurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceParam.strUrl)
}
#endif
inline void OnvifDeviceParam::set_strurl(const char* value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceParam.strUrl)
}
inline void OnvifDeviceParam::set_strurl(const char* value, size_t size) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceParam.strUrl)
}
inline ::std::string* OnvifDeviceParam::mutable_strurl() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceParam.strUrl)
  return strurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnvifDeviceParam::release_strurl() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceParam.strUrl)
  
  return strurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnvifDeviceParam::set_allocated_strurl(::std::string* strurl) {
  if (strurl != NULL) {
    
  } else {
    
  }
  strurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strurl);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceParam.strUrl)
}

// -------------------------------------------------------------------

// OnvifDeviceLoginReq

// string strName = 1;
inline void OnvifDeviceLoginReq::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnvifDeviceLoginReq::strname() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceLoginReq.strName)
  return strname_.GetNoArena();
}
inline void OnvifDeviceLoginReq::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceLoginReq.strName)
}
#if LANG_CXX11
inline void OnvifDeviceLoginReq::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceLoginReq.strName)
}
#endif
inline void OnvifDeviceLoginReq::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceLoginReq.strName)
}
inline void OnvifDeviceLoginReq::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceLoginReq.strName)
}
inline ::std::string* OnvifDeviceLoginReq::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceLoginReq.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnvifDeviceLoginReq::release_strname() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceLoginReq.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnvifDeviceLoginReq::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceLoginReq.strName)
}

// string strPasswd = 2;
inline void OnvifDeviceLoginReq::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnvifDeviceLoginReq::strpasswd() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
  return strpasswd_.GetNoArena();
}
inline void OnvifDeviceLoginReq::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}
#if LANG_CXX11
inline void OnvifDeviceLoginReq::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}
#endif
inline void OnvifDeviceLoginReq::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}
inline void OnvifDeviceLoginReq::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}
inline ::std::string* OnvifDeviceLoginReq::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnvifDeviceLoginReq::release_strpasswd() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnvifDeviceLoginReq::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceLoginReq.strPasswd)
}

// string strUrl = 3;
inline void OnvifDeviceLoginReq::clear_strurl() {
  strurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnvifDeviceLoginReq::strurl() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceLoginReq.strUrl)
  return strurl_.GetNoArena();
}
inline void OnvifDeviceLoginReq::set_strurl(const ::std::string& value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}
#if LANG_CXX11
inline void OnvifDeviceLoginReq::set_strurl(::std::string&& value) {
  
  strurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}
#endif
inline void OnvifDeviceLoginReq::set_strurl(const char* value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}
inline void OnvifDeviceLoginReq::set_strurl(const char* value, size_t size) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}
inline ::std::string* OnvifDeviceLoginReq::mutable_strurl() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceLoginReq.strUrl)
  return strurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnvifDeviceLoginReq::release_strurl() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceLoginReq.strUrl)
  
  return strurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnvifDeviceLoginReq::set_allocated_strurl(::std::string* strurl) {
  if (strurl != NULL) {
    
  } else {
    
  }
  strurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strurl);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceLoginReq.strUrl)
}

// -------------------------------------------------------------------

// OnvifDeviceLoginResp

// string strHandle = 1;
inline void OnvifDeviceLoginResp::clear_strhandle() {
  strhandle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnvifDeviceLoginResp::strhandle() const {
  // @@protoc_insertion_point(field_get:OnvifDevice.OnvifDeviceLoginResp.strHandle)
  return strhandle_.GetNoArena();
}
inline void OnvifDeviceLoginResp::set_strhandle(const ::std::string& value) {
  
  strhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}
#if LANG_CXX11
inline void OnvifDeviceLoginResp::set_strhandle(::std::string&& value) {
  
  strhandle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}
#endif
inline void OnvifDeviceLoginResp::set_strhandle(const char* value) {
  
  strhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}
inline void OnvifDeviceLoginResp::set_strhandle(const char* value, size_t size) {
  
  strhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}
inline ::std::string* OnvifDeviceLoginResp::mutable_strhandle() {
  
  // @@protoc_insertion_point(field_mutable:OnvifDevice.OnvifDeviceLoginResp.strHandle)
  return strhandle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnvifDeviceLoginResp::release_strhandle() {
  // @@protoc_insertion_point(field_release:OnvifDevice.OnvifDeviceLoginResp.strHandle)
  
  return strhandle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnvifDeviceLoginResp::set_allocated_strhandle(::std::string* strhandle) {
  if (strhandle != NULL) {
    
  } else {
    
  }
  strhandle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strhandle);
  // @@protoc_insertion_point(field_set_allocated:OnvifDevice.OnvifDeviceLoginResp.strHandle)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace OnvifDevice

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_onvifdevicec_2eproto__INCLUDED
